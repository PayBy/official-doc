"use strict";(self.webpackChunkdeveloper_official_site=self.webpackChunkdeveloper_official_site||[]).push([[2590],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,y=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(y,o(o({ref:t},m),{},{components:n})):a.createElement(y,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3675:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));n(8209);const i={sidebar_position:4,toc_max_heading_level:6},o="In-App SDK for iOS",p={unversionedId:"Online Payment Integration/Checkout/inapp-sdk-ios",id:"Online Payment Integration/Checkout/inapp-sdk-ios",title:"In-App SDK for iOS",description:"Payers will have the almost the same operation process for using In-APP and Paypage. The difference is that if the mobile client integrates the sdk, users will get a smoother experience when paying on the native page than a web page.",source:"@site/docs/1_Online Payment Integration/Checkout/inapp-sdk-ios.md",sourceDirName:"1_Online Payment Integration/Checkout",slug:"/Online Payment Integration/Checkout/inapp-sdk-ios",permalink:"/docs/Online Payment Integration/Checkout/inapp-sdk-ios",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,toc_max_heading_level:6},sidebar:"tutorialSidebar",previous:{title:"In-App SDK for Android",permalink:"/docs/Online Payment Integration/Checkout/inapp-sdk-android"},next:{title:"Special Payment Scenes"}},l={},s=[{value:"User Experience",id:"user-experience",level:2},{value:"System Interaction",id:"system-interaction",level:2},{value:"SDK",id:"sdk",level:2},{value:"Term Definition",id:"term-definition",level:2},{value:"Applicable Version",id:"applicable-version",level:2},{value:"Installation",id:"installation",level:2},{value:"Installation with CocoaPods",id:"installation-with-cocoapods",level:3},{value:"Usage",id:"usage",level:2},{value:"Initialize SDK (Required)",id:"initialize-sdk-required",level:3},{value:"Payment Result Code Description",id:"payment-result-code-description",level:3}],m={toc:s};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"in-app-sdk-for-ios"},"In-App SDK for iOS"),(0,r.kt)("p",null,"Payers will have the almost the same operation process for using ",(0,r.kt)("strong",{parentName:"p"},"In-APP")," and ",(0,r.kt)("strong",{parentName:"p"},"Paypage"),". The difference is that if the mobile client integrates the sdk, users will get a smoother experience when paying on the native page than a web page."),(0,r.kt)("h2",{id:"user-experience"},"User Experience"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When customers are ready to complete their payment, your mobile application creates a new order creation request."),(0,r.kt)("li",{parentName:"ol"},"The PayBy returns a URL that that redirects customers to a checkout."),(0,r.kt)("li",{parentName:"ol"},"Customers enter their payment details on the checkout and complete the transaction."),(0,r.kt)("li",{parentName:"ol"},"If the payment is completed, customers will be redirected to the merchant's success page.")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"card-ue",src:n(28260).Z,width:"1481",height:"1000"})),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"system-interaction"},"System Interaction"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"inappflow",src:n(14525).Z,width:"1125",height:"1957"})),(0,r.kt)("h2",{id:"sdk"},"SDK"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS"},"Link")),(0,r.kt)("h2",{id:"term-definition"},"Term Definition"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"deviceId"),(0,r.kt)("br",{parentName:"p"}),"\n","A unique identifier assigned to each device.",(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("em",{parentName:"p"},"UAT environment (joint debugging) fixed value:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"deviceId123"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"partnerId"),(0,r.kt)("br",{parentName:"p"}),"\n","An identifier assigned to each merchant during the application process for the payment service.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"appId"),(0,r.kt)("br",{parentName:"p"}),"\n","An identifier assigned to each app of a merchant during the application process for the payment service.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"token"),(0,r.kt)("br",{parentName:"p"}),"\n","A data object that contains order-related information.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sign"),(0,r.kt)("br",{parentName:"p"}),"\n","A cryptographic signature generated in two steps:"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Generate the sign string")," by arranging the parameters in the following order:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String signString = "iapAppId=" + appId + "&iapDeviceId=" + deviceId + "&iapPartnerId=" + partnerId + "&token=" +             token;\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Sign the sign string")," using a private key. The encryption rules are provided in the demo."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," In the demo, the ",(0,r.kt)("inlineCode",{parentName:"p"},"sign")," is generated on the app client for demonstration purposes. For production use, the         ",(0,r.kt)("inlineCode",{parentName:"p"},"sign")," should be securely generated on the server and returned to the client.")))))),(0,r.kt)("h2",{id:"applicable-version"},"Applicable Version"),(0,r.kt)("p",null,"Use Xcode 10 and above to use the new version of SLDPayByPayment SDK, iOS 10.0 and above"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("h3",{id:"installation-with-cocoapods"},"Installation with CocoaPods"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Build your project in Xcode."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Integrate ",(0,r.kt)("inlineCode",{parentName:"strong"},"PXRPPayByPayment")," using CocoaPods.")),(0,r.kt)("p",{parentName:"li"},"Add the following line to your ",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"pod 'PXRPPayByPayment'\n")),(0,r.kt)("p",{parentName:"li"},"Save the file and run:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pod install\n")),(0,r.kt)("p",{parentName:"li"},"Then, open the project using the ",(0,r.kt)("inlineCode",{parentName:"p"},".xcworkspace")," file."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," If you are currently using ",(0,r.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment"),", replace it with ",(0,r.kt)("inlineCode",{parentName:"p"},"PXRPPayByPayment"),", run ",(0,r.kt)("inlineCode",{parentName:"p"},"pod install"),", and the new ",(0,r.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment.framework")," will be integrated into your project. The ",(0,r.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment")," pod is no longer maintained."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Configure the URL scheme.")),(0,r.kt)("p",{parentName:"li"},"In Xcode, go to your project settings, select the ",(0,r.kt)("strong",{parentName:"p"},"TARGETS")," column, and under the ",(0,r.kt)("strong",{parentName:"p"},"Info")," tab, add a URL scheme to ",(0,r.kt)("strong",{parentName:"p"},"URL Types")," for your registered application.",(0,r.kt)("br",{parentName:"p"}),"\n","Format: ",(0,r.kt)("inlineCode",{parentName:"p"},"payby")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"iapAppId"),"  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661319255013.jpg"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661319255013.jpg",alt:"Image text"})))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Set the architecture to ",(0,r.kt)("inlineCode",{parentName:"strong"},"arm64"),".")),(0,r.kt)("p",{parentName:"li"},"In Xcode, go to your project settings, select the ",(0,r.kt)("strong",{parentName:"p"},"TARGETS")," column, and under the ",(0,r.kt)("strong",{parentName:"p"},"Build Settings")," tab, change ",(0,r.kt)("strong",{parentName:"p"},"Architectures")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"arm64"),".  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661244568047.jpg"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661244568047.jpg",alt:"Image text"})))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Disable Bitcode.")),(0,r.kt)("p",{parentName:"li"},"In Xcode, go to your project settings, select the ",(0,r.kt)("strong",{parentName:"p"},"TARGETS")," column, and under the ",(0,r.kt)("strong",{parentName:"p"},"Build Settings")," tab, set ",(0,r.kt)("strong",{parentName:"p"},"Enable Bitcode")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"No"),".  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661244707155.jpg"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661244707155.jpg",alt:"Image text"}))))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"initialize-sdk-required"},"Initialize SDK (Required)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#import "AppDelegate.h"\n#import <SLDPayByPayment/SLDPayByPayment.h>\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // Override point for customization after application launch.\n    [SLDPayByPaymentInterface setLogEnabled:YES];\n    \n//    [SLDPayByPaymentInterface setLanguage:SLDPayByPaymentLanguageEn];\n//    [SLDPayByPaymentInterface setUserInterfaceStyle:SLDPayByPaymentUserInterfaceStyleDark];\n//    SLDPayByPaymentConfig *config = [SLDPayByPaymentConfig defaultConfig];\n//    config.paymentMethodMenuColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor redColor] darkColor:[UIColor greenColor]];\n//    config.paymentMethodTextColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor whiteColor] darkColor:[UIColor blackColor]];\n//    config.primaryColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor blueColor] darkColor:[UIColor blueColor]];\n//    config.appPayUseQrCode = NO;\n//    config.useDefaultResultPage = YES;\n//    [SLDPayByPaymentInterface updateConfig:config];\n\n    [SLDPayByPaymentInterface initWithAppId:{appId} partnerId:{partnerId} environment:SLDPayByPaymentEnvironmentDevelop];\n\n    ...\n\n    return YES;\n}\n\n@end\n')),(0,r.kt)("p",null,"SLDPayByPaymentEnvironment Description:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentDevelop: The environment for developing and testing."),(0,r.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentUAT: The environment for customer debugging."),(0,r.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentRelease: The environment for product online.")),(0,r.kt)("p",null,"Call methods in your class (Objective-C)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'NSString *sign = [NSString stringWithFormat:@"iapAppId=%@&iapDeviceId=%@&iapPartnerId=%@&token=%@", self.appIdTextField.text, self.deviceIdTextField.text, self.partnerIdTextField.text, self.tokenTextField.text];\n[SLDPayByPaymentInterface paymentInViewController:self withToken:self.tokenTextField.text sign:[GPBRSA encryptString:sign privateKey:[GlobalDefines privateKey]] deviceId:self.deviceIdTextField.text resultCallback:^(NSString * _Nonnull result) {\n    NSLog(@"resultCallback: %@", result);\n    if ([SLDPayByPaymentConfig defaultConfig].useDefaultResultPage == NO) {\n        [self showAlertWithMessage:result];\n    }\n}];\n')),(0,r.kt)("p",null,"Call methods in your class (Swift)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'let token = self.tokenTextField.text ?? ""\nlet deviceId = self.deviceIdTextField.text ?? ""\nlet sign = "iapAppId=\\(self.appIdTextField.text ?? "")&iapDeviceId=\\(deviceId)&iapPartnerId=\\(self.partnerIdTextField.text ?? "")&token=\\(token)"\nSLDPayByPaymentInterface.payment(in: self, withToken: token, sign: GPBRSA.encryptString(sign, privateKey: GlobalDefines.privateKey()), deviceId: deviceId) { [weak self] result in\n    print("resultCallback: \\(result)")\n    if SLDPayByPaymentConfig.default().useDefaultResultPage == false {\n        self?.showAlert(with: result)\n    }\n}\n')),(0,r.kt)("h3",{id:"payment-result-code-description"},"Payment Result Code Description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SUCCESS"),": The payee has received the payment successfully, and the entire payment process for the order is completed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FAIL"),": Payment failed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PAYING"),": Processing. Wait for the payment process to complete and return the final payment result.")))}c.isMDXComponent=!0},28260:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/card-ue-hosted-e629ee3be589dba0396d16510aaa1850.png"},14525:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inapp-633444862ed69152de709c4dc1118774.png"},8209:(e,t,n)=>{n(67294)}}]);